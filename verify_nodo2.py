#!/usr/bin/env python3
"""
üîç VERIFICACI√ìN R√ÅPIDA NODO 2 - Sistema Hospitalario
Valida que todas las funcionalidades est√©n operativas
"""

from models.base import DatabaseConnection
from models.personal_medico import PersonalMedicoModel
from models.especialidad import EspecialidadModel
from models.tipo_atencion import TipoAtencionModel
from models.contratos import ContratosManager
from models.pacientes import PacientesModel
from models.experiencia import ExperienciaModel
from models.atencion_medica import AtencionMedicaModel

def test_connectivity():
    """Prueba conectividad a ambos nodos"""
    print("üîó VERIFICANDO CONECTIVIDAD...")
    
    db = DatabaseConnection()
    
    # Test Quito
    try:
        conn_quito = db.get_connection('quito')
        if conn_quito:
            conn_quito.close()
            print("‚úÖ Conexi√≥n a Quito: OK")
        else:
            print("‚ùå Conexi√≥n a Quito: FALLO")
            return False
    except Exception as e:
        print(f"‚ùå Conexi√≥n a Quito: ERROR - {e}")
        return False
    
    # Test Guayaquil
    try:
        conn_guayaquil = db.get_connection('guayaquil')
        if conn_guayaquil:
            conn_guayaquil.close()
            print("‚úÖ Conexi√≥n a Guayaquil: OK")
        else:
            print("‚ùå Conexi√≥n a Guayaquil: FALLO")
            return False
    except Exception as e:
        print(f"‚ùå Conexi√≥n a Guayaquil: ERROR - {e}")
        return False
    
    return True

def test_read_operations():
    """Prueba operaciones de lectura en todos los m√≥dulos"""
    print("\nüìñ VERIFICANDO OPERACIONES DE LECTURA...")
    
    tests = []
    
    # Personal M√©dico
    try:
        pm = PersonalMedicoModel()
        result = pm.get_all_personal_medico()
        if result['success']:
            print(f"‚úÖ Personal M√©dico: {result['total']} registros desde nodo {result['node']}")
            tests.append(True)
        else:
            print(f"‚ùå Personal M√©dico: {result['error']}")
            tests.append(False)
    except Exception as e:
        print(f"‚ùå Personal M√©dico: ERROR - {e}")
        tests.append(False)
    
    # Especialidad
    try:
        esp = EspecialidadModel()
        result = esp.get_all_especialidades()
        if result['success']:
            print(f"‚úÖ Especialidad: {result['total']} registros desde nodo {result['node']}")
            tests.append(True)
        else:
            print(f"‚ùå Especialidad: {result['error']}")
            tests.append(False)
    except Exception as e:
        print(f"‚ùå Especialidad: ERROR - {e}")
        tests.append(False)
    
    # Tipo Atenci√≥n
    try:
        ta = TipoAtencionModel()
        result = ta.get_all_tipos_atencion()
        if result['success']:
            print(f"‚úÖ Tipo Atenci√≥n: {result['total']} registros desde nodo {result['node']}")
            tests.append(True)
        else:
            print(f"‚ùå Tipo Atenci√≥n: {result['error']}")
            tests.append(False)
    except Exception as e:
        print(f"‚ùå Tipo Atenci√≥n: ERROR - {e}")
        tests.append(False)
    
    # Contratos
    try:
        cm = ContratosManager()
        contratos = cm.get_all_contratos()
        print(f"‚úÖ Contratos: {len(contratos)} registros (centralizado)")
        tests.append(True)
    except Exception as e:
        print(f"‚ùå Contratos: ERROR - {e}")
        tests.append(False)
    
    # Pacientes
    try:
        pac = PacientesModel()
        result = pac.get_all_pacientes()
        if result['success']:
            print(f"‚úÖ Pacientes: {result['total']} registros desde nodo {result['node']}")
            tests.append(True)
        else:
            print(f"‚ùå Pacientes: {result['error']}")
            tests.append(False)
    except Exception as e:
        print(f"‚ùå Pacientes: ERROR - {e}")
        tests.append(False)
    
    return all(tests)

def test_node_detection():
    """Verifica detecci√≥n correcta del nodo actual"""
    print("\nüåç VERIFICANDO DETECCI√ìN DE NODO...")
    
    db = DatabaseConnection()
    current_node = db.detect_current_node()
    
    if current_node == 'guayaquil':
        print("‚úÖ Nodo detectado correctamente: GUAYAQUIL")
        return True
    elif current_node == 'quito':
        print("‚ö†Ô∏è Nodo detectado: QUITO (verificar configuraci√≥n si est√°s en Guayaquil)")
        return True
    else:
        print(f"‚ùå Error en detecci√≥n de nodo: {current_node}")
        return False

def test_write_restrictions():
    """Verifica restricciones de escritura"""
    print("\nüîí VERIFICANDO RESTRICCIONES DE ESCRITURA...")
    
    # Tipo Atenci√≥n (debe estar restringido en Guayaquil)
    try:
        ta = TipoAtencionModel()
        current_node = ta.detect_current_node()
        
        if current_node == 'guayaquil':
            # Intentar crear (debe fallar)
            result = ta.create_tipo_atencion({'Tipo': 'Test'})
            if not result['success'] and 'Solo permitido en nodo Quito' in result['error']:
                print("‚úÖ Tipo Atenci√≥n: Restricci√≥n funcionando correctamente")
                return True
            else:
                print("‚ùå Tipo Atenci√≥n: Restricci√≥n NO funcionando")
                return False
        else:
            print("‚ÑπÔ∏è Tipo Atenci√≥n: Nodo Quito detectado, restricciones no aplican")
            return True
    except Exception as e:
        print(f"‚ùå Error probando restricciones: {e}")
        return False

def main():
    """Ejecuta todas las verificaciones"""
    print("üöÄ VERIFICACI√ìN R√ÅPIDA NODO 2 - SISTEMA HOSPITALARIO")
    print("=" * 60)
    
    results = []
    
    # 1. Conectividad
    results.append(test_connectivity())
    
    # 2. Detecci√≥n de nodo
    results.append(test_node_detection())
    
    # 3. Operaciones de lectura
    results.append(test_read_operations())
    
    # 4. Restricciones de escritura
    results.append(test_write_restrictions())
    
    print("\n" + "=" * 60)
    
    if all(results):
        print("üéä ¬°VERIFICACI√ìN COMPLETA EXITOSA!")
        print("‚úÖ El Nodo 2 est√° listo para usar")
        print("\nüåê Iniciar aplicaci√≥n: python app.py")
        print("üîó URL: http://localhost:5000")
    else:
        print("‚ö†Ô∏è VERIFICACI√ìN CON ERRORES")
        print("‚ùå Revisar configuraci√≥n antes de usar")
        
        print("\nüîß PASOS DE SOLUCI√ìN:")
        print("1. Verificar archivo .env")
        print("2. Comprobar SQL Server est√° corriendo")
        print("3. Validar conectividad de red")
        print("4. Revisar credenciales de base de datos")

if __name__ == "__main__":
    main()
